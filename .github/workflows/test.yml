name: Run Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Setup Node.js
      uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
      with:
        version: 8
        run_install: false

    - name: Get pnpm store directory
      working-directory: ./frontend
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      working-directory: ./frontend
      run: pnpm install --frozen-lockfile

    - name: Run linting
      working-directory: ./frontend
      run: pnpm run lint

    - name: Run type checking
      working-directory: ./frontend
      run: pnpm run typecheck

    - name: Run tests
      working-directory: ./frontend
      run: pnpm run test

    - name: Run build
      working-directory: ./frontend
      run: pnpm run build

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Setup Python
      uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5.2.0
      with:
        python-version: '3.11'

    - name: Install UV
      uses: astral-sh/setup-uv@77c28f02b3322332d4a4446b3177f426da8bf086 # v4.0.0
      with:
        enable-cache: true

    - name: Install dependencies
      working-directory: ./backend
      run: uv sync

    - name: Start database with Docker Compose
      run: docker compose up -d --wait db
    - name: Run linting
      working-directory: ./backend
      run: uv run ruff check .

    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/meal_planner
        SECRET_KEY: test_secret_key_for_ci
        ANTHROPIC_API_KEY: test_api_key
      run: uv run pytest -v --tb=short -m "not slow and not integration"

    - name: Stop Docker Compose services
      if: always()
      run: docker compose down

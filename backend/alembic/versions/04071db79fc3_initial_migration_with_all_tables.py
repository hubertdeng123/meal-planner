"""Initial migration with all tables

Revision ID: 04071db79fc3
Revises: 
Create Date: 2025-06-30 04:46:24.262042+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '04071db79fc3'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('food_preferences', sa.JSON(), nullable=True),
    sa.Column('dietary_restrictions', sa.JSON(), nullable=True),
    sa.Column('email_notifications_enabled', sa.Boolean(), nullable=True),
    sa.Column('weekly_planning_reminder', sa.Boolean(), nullable=True),
    sa.Column('reminder_day_of_week', sa.Integer(), nullable=True),
    sa.Column('reminder_time', sa.Time(), nullable=True),
    sa.Column('timezone', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('meal_plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meal_plans_id'), 'meal_plans', ['id'], unique=False)
    op.create_table('recipes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('instructions', sa.JSON(), nullable=True),
    sa.Column('ingredients', sa.JSON(), nullable=True),
    sa.Column('prep_time_minutes', sa.Integer(), nullable=True),
    sa.Column('cook_time_minutes', sa.Integer(), nullable=True),
    sa.Column('servings', sa.Integer(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('source_urls', sa.JSON(), nullable=True),
    sa.Column('cuisine', sa.String(), nullable=True),
    sa.Column('difficulty', sa.String(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('calories', sa.Float(), nullable=True),
    sa.Column('protein_g', sa.Float(), nullable=True),
    sa.Column('carbs_g', sa.Float(), nullable=True),
    sa.Column('fat_g', sa.Float(), nullable=True),
    sa.Column('fiber_g', sa.Float(), nullable=True),
    sa.Column('sugar_g', sa.Float(), nullable=True),
    sa.Column('sodium_mg', sa.Float(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_recipes_cuisine'), 'recipes', ['cuisine'], unique=False)
    op.create_index(op.f('ix_recipes_id'), 'recipes', ['id'], unique=False)
    op.create_index(op.f('ix_recipes_name'), 'recipes', ['name'], unique=False)
    op.create_table('grocery_lists',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('meal_plan_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['meal_plan_id'], ['meal_plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_grocery_lists_id'), 'grocery_lists', ['id'], unique=False)
    op.create_table('meal_plan_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('meal_plan_id', sa.Integer(), nullable=True),
    sa.Column('recipe_id', sa.Integer(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('meal_type', sa.String(), nullable=True),
    sa.Column('servings', sa.Integer(), nullable=True),
    sa.Column('recipe_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['meal_plan_id'], ['meal_plans.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meal_plan_items_id'), 'meal_plan_items', ['id'], unique=False)
    op.create_table('recipe_feedbacks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('feedback_text', sa.Text(), nullable=True),
    sa.Column('made_it', sa.Boolean(), nullable=True),
    sa.Column('would_make_again', sa.Boolean(), nullable=True),
    sa.Column('difficulty_rating', sa.Integer(), nullable=True),
    sa.Column('taste_rating', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_recipe_feedbacks_id'), 'recipe_feedbacks', ['id'], unique=False)
    op.create_table('grocery_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('grocery_list_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('checked', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['grocery_list_id'], ['grocery_lists.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_grocery_items_id'), 'grocery_items', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_grocery_items_id'), table_name='grocery_items')
    op.drop_table('grocery_items')
    op.drop_index(op.f('ix_recipe_feedbacks_id'), table_name='recipe_feedbacks')
    op.drop_table('recipe_feedbacks')
    op.drop_index(op.f('ix_meal_plan_items_id'), table_name='meal_plan_items')
    op.drop_table('meal_plan_items')
    op.drop_index(op.f('ix_grocery_lists_id'), table_name='grocery_lists')
    op.drop_table('grocery_lists')
    op.drop_index(op.f('ix_recipes_name'), table_name='recipes')
    op.drop_index(op.f('ix_recipes_id'), table_name='recipes')
    op.drop_index(op.f('ix_recipes_cuisine'), table_name='recipes')
    op.drop_table('recipes')
    op.drop_index(op.f('ix_meal_plans_id'), table_name='meal_plans')
    op.drop_table('meal_plans')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
